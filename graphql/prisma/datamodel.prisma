type User {
  id: ID! @unique
  name: String!
}

type Competition {
  id: ID! @unique
  name: String! @unique
  teams: [Team!]!
}

type Team {
  id: ID! @unique
  name: String!
  shortName: String!
  slugName: String! @unique
  originId: Int!
  squad: Int!
  age: Float!
  foreigners: Int!
  totalMarketValue: String!
  averageMarketValue: String!
  league: Competition!
  players: [Player!]!
}

type Player {
  id: ID! @unique
  shirtNumber: Int!
  firstName: String!
  lastName: String!
  slugName: String!
  originId: Int! @unique
  mainPosition: String!
  dateOfBirth: String!
  age: Int!
  height: String!
  foot: String!
  joined: String!
  contractUntil: String!
  marketValue: String!
  team: Team!
  matches: [Match!]!
}

enum PlayerMatchStatus {
  PLAYED
  ON_THE_BENCH
  NOT_IN_SQUAD
  INJURIED
}

# union MatchInfo = PlayerMatchData | PlayerMatchStatus

type Match {
  id: ID! @unique
  day: Int!
  # homeTeam: Team! @relation(name: "MatchTeam")
  # homeTeam: Team!
  homeTeamRanking: String!
  # awayTeam: Team!
  awayTeamRanking: String!
  result: String!
  playerStatus: PlayerMatchStatus!
}

# type PlayerMatchData {
#   id: ID! @unique
#   position: String!
#   goals: Int!
#   assists: Int!
#   ownGoals: Int!
#   yellowCards: Boolean!
#   secondYelows: Boolean!
#   redCards: Boolean!
#   substitutedOn: Int!;
#   substitutedOff: Int!;
#   minutesPlayed: Int!;
# }