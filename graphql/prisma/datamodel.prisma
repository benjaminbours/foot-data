type User {
  id: ID! @unique
  name: String!
}

type Competition {
  id: ID! @unique
  name: String! @unique
  teams: [Team!]!
  matches: [Match!]!
}

type Team {
  id: ID! @unique
  name: String!
  shortName: String!
  slugName: String! @unique
  originId: Int!
  squad: Int!
  age: Float!
  foreigners: Int!
  totalMarketValue: String!
  averageMarketValue: String!
  league: Competition!
  players: [Player!]!
  homeMatches: [Match!]! @relation(name: "HomeMatches")
  awayMatches: [Match!]! @relation(name: "AwayMatches")
}

type Player {
  id: ID! @unique
  shirtNumber: Int!
  firstName: String!
  lastName: String!
  slugName: String!
  originId: Int! @unique
  mainPosition: String!
  dateOfBirth: String!
  age: Int!
  height: String!
  foot: String!
  joined: String!
  contractUntil: String!
  marketValue: String!
  team: Team!
  matches: [Match!]!
}

enum PlayerMatchStatus {
  ON_THE_BENCH
  NOT_IN_SQUAD
  SECOND_TEAM
  WITH_U21
  RED_CARD_SUSPENSION
  NO_INFORMATION
  INJURED
  PLAYED
  INTERNATIONAL
  INDIRECT_SUSPENSION
  YELLOW_CARD_SUSPENSION
  NO_ELIGIBLE
}

type Match {
  id: ID! @unique
  day: Int!
  homeTeam: Team! @relation(name: "HomeMatches")
  homeTeamRanking: Int!
  awayTeam: Team! @relation(name: "AwayMatches")
  awayTeamRanking: Int!
  result: String!
  playerStatus: PlayerMatchStatus!
  stats: PlayerMatchData
  player: Player!
  # players: [Player!]! @relation(name: "PlayerStats")
}

type PlayerMatchData {
  id: ID! @unique
  position: String!
  goals: Int!
  assists: Int!
  ownGoals: Int!
  yellowCards: Boolean!
  secondYellows: Boolean!
  redCards: Boolean!
  substitutedOn: Int!
  substitutedOff: Int!
  minutesPlayed: Int!
  match: Match!
  player: Player!
  # player: Player! @relation(name: "PlayerStats")
}